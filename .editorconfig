; This is the ~/.editorconfig, anything higher is non user specific
root = true

; Default to Unix style for everything and specialize as needed
[*]
indent_style             = tab
indent_size              = 8
end_of_line              = lf
charset                  = utf-8
trim_trailing_whitespace = true
insert_final_newline     = true

; Go
[*.go]
indent_style             = tab
indent_size              = 4
charset                  = utf-8
trim_trailing_whitespace = true

; Modern markup langs
[*.{md,yml,json}]
indent_style = space
indent_size  = 2

; Makefiles
[{M,m}akefile,*.mk]
indent_style = tab
indent_size  = 8
end_of_line  = lf

; Shell files
[*.sh]
indent_style = tab
indent_size  = 8
end_of_line  = lf

; Docker files
[{D,d}ockerfile]
indent_style = space
indent_size = 4

; Batch files
[*.{cmd,bat}]
indent_style = space
indent_size  = 4
end_of_line  = crlf

; Web files should be indented with spaces
[*.{html,htm,css,js,cshtml}]
indent_style = space
indent_size  = 4

; VS solution files
[*.sln]
indent_style = tab
indent_size  = 4

; VS project files
[*.csproj]
indent_style = space
indent_size  = 2

; XML files
[*.xml]
indent_style = space
indent_size  = 2

; Dotnet files
[*.{cs,vb}]
indent_style = space
indent_size  = 4
end_of_line  = unset

; File heading
file_header_template = {fileName}\nLicensed under CC0

; Dotnet style conventions
dotnet_analyzer_diagnostic.severity = suggestion

; Don't use 'this' when unnecessary
dotnet_style_qualification_for_event    = false:warning
dotnet_style_qualification_for_field    = false:warning
dotnet_style_qualification_for_method   = false:warning
dotnet_style_qualification_for_property = false:warning

; Use keywords rather than imported classes for native types
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access             = true:warning

; Use pattern matching syntax
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_switch_expression                 = true:suggestion

; Try to use arrow function syntax
csharp_style_expression_bodied_accessors       = true:suggestion
csharp_style_expression_bodied_constructors    = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers        = true:suggestion
csharp_style_expression_bodied_lambdas         = true:suggestion
csharp_style_expression_bodied_local_functions = true:suggestion
csharp_style_expression_bodied_methods         = when_on_single_line:suggestion
csharp_style_expression_bodied_operators       = when_on_single_line:suggestion
csharp_style_expression_bodied_properties      = true:suggestion

; Use simple and consise expression syntax
csharp_prefer_simple_default_expression            = true:suggestion
csharp_style_deconstructed_variable_declaration    = true:suggestion
csharp_style_inlined_variable_declaration          = true:warning
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_prefer_index_operator                 = true:suggestion
csharp_style_prefer_range_operator                 = true:suggestion
csharp_style_throw_expression                      = true:suggestion

; Never put a using import statment __inside__ a namespace
csharp_using_directive_placement = outside_namespace:error

; Sort using directives
dotnet_separate_import_directive_groups = true
dotnet_sort_system_directives_first     = false

; Use 'is null' syntax for null checks
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

; Remove unused parameters
dotnet_code_quality_unused_parameters = all:suggestion

; Use simplified initialization syntax
dotnet_style_collection_initializer = true:warning
dotnet_style_object_initializer     = true:warning
dotnet_style_explicit_tuple_names   = true:warning

; Use var whenever there isn't a good reason not to
csharp_style_var_elsewhere             = true:suggestion
csharp_style_var_for_built_in_types    = true:suggestion
csharp_style_var_when_type_is_apparent = true:warning

; Enforce braces on blocks but allow declared using
csharp_prefer_braces 				 = true:warning
csharp_prefer_simple_using_statement = true:suggestion

; Use parentheses to clarify statment precedence
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators      = always_for_clarity
dotnet_style_parentheses_in_other_operators             = never_if_unnecessary

; Manage specific IDE refactoring settings
dotnet_diagnostic.IDE0001.severity = warning    ; Remove unnecessary name qualifications.
dotnet_diagnostic.IDE0002.severity = warning    ; Always simplify member access.
dotnet_diagnostic.IDE0004.severity = warning    ; Remove unnecessary cast.
dotnet_diagnostic.IDE0005.severity = warning    ; Remove unnecessary using directive.
dotnet_diagnostic.IDE0011.severity = warning    ; Always added curly braces.
dotnet_diagnostic.IDE0018.severity = warning    ; Inline variable declaration.
dotnet_diagnostic.IDE0019.severity = warning    ; Always use pattern matching to avoid 'as' followed by a 'null' check.
dotnet_diagnostic.IDE0020.severity = warning    ; Always use pattern matching to avoid 'is' check followed by a cast.
dotnet_diagnostic.IDE0029.severity = warning    ; Always use coalesce expression (non-nullable types).
dotnet_diagnostic.IDE0030.severity = warning    ; Always use coalesce expression (nullable types).
dotnet_diagnostic.IDE0031.severity = warning    ; Always use null propagation.
dotnet_diagnostic.IDE0032.severity = warning    ; Always use auto property.
dotnet_diagnostic.IDE0033.severity = error      ; Always use explicitly provided tuple name.
dotnet_diagnostic.IDE0034.severity = warning    ; Always simplify 'default' expression.
dotnet_diagnostic.IDE0035.severity = warning    ; Remove unreachable code.
dotnet_diagnostic.IDE0037.severity = warning    ; Always use inferred member name.
dotnet_diagnostic.IDE0041.severity = warning    ; Always use is null check.
dotnet_diagnostic.IDE0042.severity = warning    ; Always deconstruct variable declaration.
dotnet_diagnostic.IDE0043.severity = warning    ; Always use correct number of format arguments.
dotnet_diagnostic.IDE0044.severity = warning    ; Always add readonly modifier.
dotnet_diagnostic.IDE0050.severity = suggestion ; Always convert anonymous type to tuple.
dotnet_diagnostic.IDE0051.severity = warning    ; Remove unused private member.
dotnet_diagnostic.IDE0052.severity = warning    ; Remove unread private member
dotnet_diagnostic.IDE0054.severity = warning    ; Always use compound assignment
dotnet_diagnostic.IDE0058.severity = none       ; Remove unnecessary expression value (allow silent discard).
dotnet_diagnostic.IDE0071.severity = warning    ; Always simplify interpolation.
dotnet_diagnostic.IDE0074.severity = warning    ; Always use coalesce compound assignment
dotnet_diagnostic.IDE0076.severity = warning    ; Remove invalid global 'SuppressMessageAttribute'.
dotnet_diagnostic.IDE0077.severity = warning    ; Always avoid legacy format target in global 'SuppressMessageAttribute'.
dotnet_diagnostic.IDE0078.severity = warning    ; always use pattern matching.
dotnet_diagnostic.IDE0079.severity = warning    ; Remove unnecessary suppression.
dotnet_diagnostic.IDE0090.severity = warning    ; Always simplify new expression.

; Manage specific RCS refactoring settings
dotnet_diagnostic.RCS0001.severity  = warning ; Add empty line after embedded statement
dotnet_diagnostic.RCS0003.severity  = warning ; Add empty line after using directive list
dotnet_diagnostic.RCS0006.severity  = warning ; Add empty line before using directive list
dotnet_diagnostic.RCS0007.severity  = warning ; Add empty line between accessors
dotnet_diagnostic.RCS0008.severity  = warning ; Add empty line between block and statement
dotnet_diagnostic.RCS0009.severity  = warning ; Add empty line between declaration and documentation comment
dotnet_diagnostic.RCS0010.severity  = warning ; Add empty line between declarations
dotnet_diagnostic.RCS0014.severity  = warning ; Add empty line between switch sections
dotnet_diagnostic.RCS0015.severity  = warning ; Add empty line between using directives with different root namespace (or vice versa)
dotnet_diagnostic.RCS0016.severity  = warning ; Add newline after attribute list
dotnet_diagnostic.RCS0021.severity  = warning ; Add newline after opening brace of block
dotnet_diagnostic.RCS0022.severity  = warning ; Add newline after opening brace of empty block
dotnet_diagnostic.RCS0023.severity  = warning ; Add newline after opening brace of type declaration
dotnet_diagnostic.RCS0024.severity  = warning ; Add newline after switch label
dotnet_diagnostic.RCS0025.severity  = warning ; Add newline before accessor of full property
dotnet_diagnostic.RCS0028.severity  = warning ; Add newline before conditional operator instead of after it (or vice versa)
dotnet_diagnostic.RCS0030.severity  = warning ; Add newline before embedded statement
dotnet_diagnostic.RCS0031.severity  = warning ; Add newline before enum member
dotnet_diagnostic.RCS0033.severity  = warning ; Add newline before statement
dotnet_diagnostic.RCS0038.severity  = warning ; Remove empty line between using directives with same root namespace
dotnet_diagnostic.RCS0039.severity  = warning ; Remove newline before base list
dotnet_diagnostic.RCS0041.severity  = warning ; Remove newline between 'if' keyword and 'else' keyword
dotnet_diagnostic.RCS0042.severity  = warning ; Remove newlines from accessor list of auto-property
dotnet_diagnostic.RCS0043.severity  = warning ; Remove newlines from accessor with single-line expression
dotnet_diagnostic.RCS0048.severity  = warning ; Remove newlines from initializer with single-line expression
dotnet_diagnostic.RCS0049.severity  = warning ; Add empty line after top comment
dotnet_diagnostic.RCS0050.severity  = warning ; Add empty line before top declaration
dotnet_diagnostic.RCS0051.severity  = warning ; Add newline between closing brace and 'while' keyword (or vice versa)
dotnet_diagnostic.RCS0056.severity  = warning ; A line is too long
dotnet_diagnostic.RCS1003.severity  = warning ; Add braces to if-else (when expression spans over multiple lines)
dotnet_diagnostic.RCS1005.severity  = warning ; Simplify nested using statement
dotnet_diagnostic.RCS1006.severity  = warning ; Merge 'else' with nested 'if'
dotnet_diagnostic.RCS1007.severity  = warning ; Add braces
dotnet_diagnostic.RCS1010.severity  = warning ; Use 'var' instead of explicit type (when the type is obvious)
dotnet_diagnostic.RCS1013.severity  = warning ; Use predefined type
dotnet_diagnostic.RCS1014.severity  = warning ; Use explicitly typed array (or vice versa)
dotnet_diagnostic.RCS1014a.severity = warning ; Use implicitly typed array (when type is obvious)
dotnet_diagnostic.RCS1014i.severity = warning ; Use implicitly typed array
dotnet_diagnostic.RCS1015.severity  = warning ; Use nameof operator
dotnet_diagnostic.RCS1016.severity  = warning ; Convert block body to expression-body (or vice versa)
dotnet_diagnostic.RCS1018.severity  = warning ; Add accessibility modifiers (or vice versa)
dotnet_diagnostic.RCS1020.severity  = warning ; Simplify Nullable<T> to T?
dotnet_diagnostic.RCS1021.severity  = warning ; Convert lambda expression body to expression-body
dotnet_diagnostic.RCS1032.severity  = warning ; Remove redundant parentheses
dotnet_diagnostic.RCS1033.severity  = warning ; Remove redundant boolean literal
dotnet_diagnostic.RCS1034.severity  = warning ; Remove redundant 'sealed' modifier
dotnet_diagnostic.RCS1035.severity  = warning ; Remove redundant comma in initializer
dotnet_diagnostic.RCS1036.severity  = warning ; Remove redundant empty line
dotnet_diagnostic.RCS1038.severity  = warning ; Remove empty statement
dotnet_diagnostic.RCS1039.severity  = warning ; Remove argument list from attribute
dotnet_diagnostic.RCS1040.severity  = warning ; Remove empty 'else' clause
dotnet_diagnostic.RCS1041.severity  = warning ; Remove empty initializer
dotnet_diagnostic.RCS1042.severity  = warning ; Remove enum default underlying type
dotnet_diagnostic.RCS1043.severity  = warning ; Remove 'partial' modifier from type with a single part
dotnet_diagnostic.RCS1044.severity  = warning ; Remove original exception from throw statement
dotnet_diagnostic.RCS1045.severity  = warning ; Rename private field to camel case with underscore
dotnet_diagnostic.RCS1046.severity  = warning ; Asynchronous method name should end with 'Async'
dotnet_diagnostic.RCS1047.severity  = warning ; Non-asynchronous method name should not end with 'Async'
dotnet_diagnostic.RCS1048.severity  = warning ; Use lambda expression instead of anonymous method
dotnet_diagnostic.RCS1049.severity  = warning ; Simplify boolean comparison
dotnet_diagnostic.RCS1050.severity  = warning ; Add argument list to object creation expression (or vice versa)
dotnet_diagnostic.RCS1050i.severity = warning ; Remove argument list from object creation expression
dotnet_diagnostic.RCS1052.severity  = warning ; Declare each attribute separately
dotnet_diagnostic.RCS1055.severity  = warning ; Avoid semicolon at the end of declaration
dotnet_diagnostic.RCS1058.severity  = warning ; Use compound assignment
dotnet_diagnostic.RCS1060.severity  = warning ; Declare each type in separate file
dotnet_diagnostic.RCS1061.severity  = warning ; Merge 'if' with nested 'if'
dotnet_diagnostic.RCS1064.severity  = warning ; Avoid usage of for statement to create an infinite loop
dotnet_diagnostic.RCS1066.severity  = warning ; Remove empty 'finally' clause
dotnet_diagnostic.RCS1068.severity  = warning ; Simplify logical negation
dotnet_diagnostic.RCS1069.severity  = warning ; Remove unnecessary case label
dotnet_diagnostic.RCS1070.severity  = warning ; Remove redundant default switch section
dotnet_diagnostic.RCS1071.severity  = warning ; Remove redundant base constructor call
dotnet_diagnostic.RCS1072.severity  = warning ; Remove empty namespace declaration
dotnet_diagnostic.RCS1073.severity  = warning ; Convert 'if' to 'return' statement
dotnet_diagnostic.RCS1074.severity  = warning ; Remove redundant constructor
dotnet_diagnostic.RCS1075.severity  = warning ; Avoid empty catch clause that catches System.Exception
dotnet_diagnostic.RCS1077.severity  = warning ; Optimize LINQ method call
dotnet_diagnostic.RCS1081.severity  = warning ; Split variable declaration
dotnet_diagnostic.RCS1084.severity  = warning ; Use coalesce expression instead of conditional expression
dotnet_diagnostic.RCS1085.severity  = warning ; Use auto-implemented property
dotnet_diagnostic.RCS1089.severity  = warning ; Use --/++ operator instead of assignment
dotnet_diagnostic.RCS1094.severity  = warning ; Declare using directive on top level
dotnet_diagnostic.RCS1097.severity  = warning ; Remove redundant 'ToString' call
dotnet_diagnostic.RCS1101.severity  = warning ; Format documentation summary on multiple lines
dotnet_diagnostic.RCS1102.severity  = warning ; Make class static
dotnet_diagnostic.RCS1103.severity  = warning ; Convert 'if' to assignment
dotnet_diagnostic.RCS1104.severity  = warning ; Simplify conditional expression
dotnet_diagnostic.RCS1108.severity  = warning ; Add 'static' modifier to all partial class declarations
dotnet_diagnostic.RCS1113.severity  = warning ; Use 'string.IsNullOrEmpty' method
dotnet_diagnostic.RCS1123.severity  = warning ; Add parentheses when necessary
dotnet_diagnostic.RCS1124.severity  = warning ; Inline local variable
dotnet_diagnostic.RCS1126.severity  = warning ; Add braces to if-else
dotnet_diagnostic.RCS1128.severity  = warning ; Use coalesce expression
dotnet_diagnostic.RCS1129.severity  = warning ; Remove redundant field initialization
dotnet_diagnostic.RCS1132.severity  = warning ; Remove redundant overriding member
dotnet_diagnostic.RCS1133.severity  = warning ; Remove redundant Dispose/Close call
dotnet_diagnostic.RCS1134.severity  = warning ; Remove redundant statement
dotnet_diagnostic.RCS1135.severity  = warning ; Declare enum member with zero value (when enum has FlagsAttribute)
dotnet_diagnostic.RCS1136.severity  = warning ; Merge switch sections with equivalent content
dotnet_diagnostic.RCS1138.severity  = warning ; Add summary to documentation comment
dotnet_diagnostic.RCS1139.severity  = warning ; Add summary element to documentation comment
dotnet_diagnostic.RCS1140.severity  = warning ; Add exception to documentation comment
dotnet_diagnostic.RCS1141.severity  = warning ; Add 'param' element to documentation comment
dotnet_diagnostic.RCS1142.severity  = warning ; Add 'typeparam' element to documentation comment
dotnet_diagnostic.RCS1143.severity  = warning ; Simplify coalesce expression
dotnet_diagnostic.RCS1145.severity  = warning ; Remove redundant 'as' operator
dotnet_diagnostic.RCS1146.severity  = warning ; Use conditional access
dotnet_diagnostic.RCS1151.severity  = warning ; Remove redundant cast
dotnet_diagnostic.RCS1154.severity  = warning ; Sort enum members
dotnet_diagnostic.RCS1155.severity  = warning ; Use StringComparison when comparing strings
dotnet_diagnostic.RCS1157.severity  = warning ; Composite enum value contains undefined flag
dotnet_diagnostic.RCS1158.severity  = warning ; Static member in generic type should use a type parameter
dotnet_diagnostic.RCS1160.severity  = warning ; Abstract type should not have public constructors
dotnet_diagnostic.RCS1161.severity  = warning ; Enum should declare explicit values
dotnet_diagnostic.RCS1162.severity  = warning ; Avoid chain of assignments
dotnet_diagnostic.RCS1163.severity  = warning ; Unused parameter
dotnet_diagnostic.RCS1164.severity  = warning ; Unused type parameter
dotnet_diagnostic.RCS1168.severity  = warning ; Parameter name differs from base name
dotnet_diagnostic.RCS1170.severity  = warning ; Use read-only auto-implemented property
dotnet_diagnostic.RCS1171.severity  = warning ; Simplify lazy initialization
dotnet_diagnostic.RCS1172.severity  = warning ; Use 'is' operator instead of 'as' operator
dotnet_diagnostic.RCS1173.severity  = warning ; Use coalesce expression instead of 'if'
dotnet_diagnostic.RCS1175.severity  = warning ; Unused this parameter
dotnet_diagnostic.RCS1176.severity  = warning ; Use 'var' instead of explicit type (when the type is not obvious)
dotnet_diagnostic.RCS1177.severity  = warning ; Use 'var' instead of explicit type (in foreach)
dotnet_diagnostic.RCS1179.severity  = warning ; Unnecessary assignment
dotnet_diagnostic.RCS1180.severity  = warning ; Inline lazy initialization
dotnet_diagnostic.RCS1181.severity  = warning ; Convert comment to documentation comment
dotnet_diagnostic.RCS1182.severity  = warning ; Remove redundant base interface
dotnet_diagnostic.RCS1187.severity  = warning ; Use constant instead of field
dotnet_diagnostic.RCS1188.severity  = warning ; Remove redundant auto-property initialization
dotnet_diagnostic.RCS1189.severity  = warning ; Add or remove region name
dotnet_diagnostic.RCS1190.severity  = warning ; Join string expressions
dotnet_diagnostic.RCS1191.severity  = warning ; Declare enum value as combination of names
dotnet_diagnostic.RCS1192.severity  = warning ; Unnecessary usage of verbatim string literal
dotnet_diagnostic.RCS1193.severity  = warning ; Overriding member should not change 'params' modifier
dotnet_diagnostic.RCS1194.severity  = warning ; Implement exception constructors
dotnet_diagnostic.RCS1195.severity  = warning ; Use ^ operator
dotnet_diagnostic.RCS1196.severity  = warning ; Call extension method as instance method
dotnet_diagnostic.RCS1197.severity  = warning ; Optimize StringBuilder.Append/AppendLine call
dotnet_diagnostic.RCS1199.severity  = warning ; Unnecessary null check
dotnet_diagnostic.RCS1200.severity  = warning ; Call 'Enumerable.ThenBy' instead of 'Enumerable.OrderBy'
dotnet_diagnostic.RCS1201.severity  = warning ; Use method chaining
dotnet_diagnostic.RCS1202.severity  = warning ; Avoid NullReferenceException
dotnet_diagnostic.RCS1203.severity  = warning ; Use AttributeUsageAttribute
dotnet_diagnostic.RCS1205.severity  = warning ; Order named arguments according to the order of parameters
dotnet_diagnostic.RCS1206.severity  = warning ; Use conditional access instead of conditional expression
dotnet_diagnostic.RCS1207.severity  = warning ; Convert anonymous function to method group (or vice versa)
dotnet_diagnostic.RCS1208.severity  = warning ; Reduce 'if' nesting
dotnet_diagnostic.RCS1209.severity  = warning ; Order type parameter constraints
dotnet_diagnostic.RCS1211.severity  = warning ; Remove unnecessary 'else'
dotnet_diagnostic.RCS1212.severity  = warning ; Remove redundant assignment
dotnet_diagnostic.RCS1215.severity  = warning ; Expression is always equal to true/false
dotnet_diagnostic.RCS1216.severity  = warning ; Unnecessary unsafe context
dotnet_diagnostic.RCS1217.severity  = warning ; Convert interpolated string to concatenation
dotnet_diagnostic.RCS1218.severity  = warning ; Simplify code branching
dotnet_diagnostic.RCS1220.severity  = warning ; Use pattern matching instead of combination of 'is' operator and cast operator
dotnet_diagnostic.RCS1221.severity  = warning ; Use pattern matching instead of combination of 'as' operator and null check
dotnet_diagnostic.RCS1222.severity  = warning ; Merge preprocessor directives
dotnet_diagnostic.RCS1224.severity  = warning ; Make method an extension method
dotnet_diagnostic.RCS1225.severity  = warning ; Make class sealed
dotnet_diagnostic.RCS1226.severity  = warning ; Add paragraph to documentation comment
dotnet_diagnostic.RCS1227.severity  = warning ; Validate arguments correctly
dotnet_diagnostic.RCS1230.severity  = warning ; Unnecessary explicit use of enumerator
dotnet_diagnostic.RCS1231.severity  = warning ; Make parameter ref read-only
dotnet_diagnostic.RCS1232.severity  = warning ; Order elements in documentation comment
dotnet_diagnostic.RCS1233.severity  = warning ; Use short-circuiting operator
dotnet_diagnostic.RCS1234.severity  = warning ; Duplicate enum value
dotnet_diagnostic.RCS1235.severity  = warning ; Optimize method call
dotnet_diagnostic.RCS1236.severity  = warning ; Use exception filter
dotnet_diagnostic.RCS1237.severity  = warning ; Use bit shift operator
dotnet_diagnostic.RCS1238.severity  = warning ; Avoid nested ?: operators
dotnet_diagnostic.RCS1239.severity  = warning ; Use 'for' statement instead of 'while' statement
dotnet_diagnostic.RCS1240.severity  = warning ; Operator is unnecessary
dotnet_diagnostic.RCS1241.severity  = warning ; Implement non-generic counterpart
dotnet_diagnostic.RCS1242.severity  = warning ; Do not pass non-read-only struct by read-only reference
dotnet_diagnostic.RCS1243.severity  = warning ; Duplicate word in a comment
dotnet_diagnostic.RCS1244.severity  = warning ; Simplify 'default' expression
dotnet_diagnostic.RCS1246.severity  = warning ; Use element access
dotnet_diagnostic.RCS1246a.severity = warning ; Do not use element access when expression is invocation
dotnet_diagnostic.RCS1247.severity  = warning ; Fix documentation comment tag
dotnet_diagnostic.RCS1248.severity  = warning ; Use 'is null' pattern instead of comparison (or vice versa)
dotnet_diagnostic.RCS1248a.severity = warning ; Use 'is null' pattern instead of '!=' operator
dotnet_diagnostic.RCS9001.severity  = warning ; Use pattern matching
dotnet_diagnostic.RCS9003.severity  = warning ; Unnecessary conditional access
dotnet_diagnostic.RCS9004.severity  = warning ; Call 'Any' instead of accessing 'Count'
dotnet_diagnostic.RCS9005.severity  = warning ; Unnecessary null check
dotnet_diagnostic.RCS9006.severity  = warning ; Use element access

; Configure maximum line length
roslynator.max_line_length = 80

; Manage specific CA refactoring settings
dotnet_diagnostic.CA1041.severity = warning ; Provide ObsoleteAttribute message.
dotnet_diagnostic.CA1054.severity = warning ; URI parameters should not be strings.
dotnet_diagnostic.CA1055.severity = warning ; URI return values should not be strings.
dotnet_diagnostic.CA1056.severity = warning ; URI properties should not be strings.
dotnet_diagnostic.CA2100.severity = warning ; Review SQL queries for security vulnerabilities.
dotnet_diagnostic.CA2200.severity = warning ; Rethrow to preserve stack details.
dotnet_diagnostic.CA2201.severity = warning ; Do not raise reserved exception types.
dotnet_diagnostic.CA2208.severity = warning ; Instantiate argument exceptions correctly.
dotnet_diagnostic.CA2218.severity = warning ; Override GetHashCode on overriding Equals.
dotnet_diagnostic.CA2224.severity = warning ; Override Equals on overloading operator equals.
dotnet_diagnostic.CA2234.severity = warning ; Pass System.Uri objects instead of strings.
dotnet_diagnostic.CA3001.severity = warning ; Review code for SQL injection vulnerabilities.
dotnet_diagnostic.CA3003.severity = warning ; Review code for file path injection vulnerabilities.
dotnet_diagnostic.CA3004.severity = warning ; Review code for information disclosure vulnerabilities.
dotnet_diagnostic.CA3006.severity = warning ; Review code for process command injection vulnerabilities.
dotnet_diagnostic.CA3007.severity = warning ; Review code for open redirect vulnerabilities.

; Manage specific CA code quality settings
dotnet_code_quality.CA2241.severity = warning ; Provide correct arguments to formatting methods
dotnet_code_quality.CA1021.severity = warning ; Avoid out parameters
dotnet_code_quality.CA1008.severity = warning ; Enums should have zero value
dotnet_code_quality.CA1069.severity = warning ; Enums should not have duplicate values
dotnet_code_quality.CA2237.severity = warning ; Mark ISerializable types with SerializableAttribute
dotnet_code_quality.CA2229.severity = warning ; Implement serialization constructors
dotnet_code_quality.CA2235.severity = warning ; Mark all non-serializable fields

; Attempt to autmoatically detect formating methods
dotnet_code_quality.CA2241.try_determine_additional_string_formatting_methods_automatically = true

; New line preferences
csharp_new_line_before_catch                          = true
csharp_new_line_before_else                           = true
csharp_new_line_before_finally                        = true
csharp_new_line_before_members_in_anonymous_types     = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace                     = all
csharp_new_line_between_query_expression_clauses      = true

; Indentation preferences
csharp_indent_block_contents           = true
csharp_indent_braces                   = false
csharp_indent_case_contents            = true
csharp_indent_case_contents_when_block = false
csharp_indent_labels                   = one_less_than_current
csharp_indent_switch_labels            = true

; Space preferences
csharp_space_after_cast                                                  = false
csharp_space_after_colon_in_inheritance_clause                           = true
csharp_space_after_comma                                                 = true
csharp_space_after_dot                                                   = false
csharp_space_after_keywords_in_control_flow_statements                   = true
csharp_space_after_semicolon_in_for_statement                            = true
csharp_space_around_binary_operators                                     = before_and_after
csharp_space_around_declaration_statements                               = ignore
csharp_space_before_colon_in_inheritance_clause                          = true
csharp_space_before_comma                                                = false
csharp_space_before_dot                                                  = false
csharp_space_before_open_square_brackets                                 = false
csharp_space_before_semicolon_in_for_statement                           = false
csharp_space_between_empty_square_brackets                               = false
csharp_space_between_method_call_empty_parameter_list_parentheses        = false
csharp_space_between_method_call_name_and_opening_parenthesis            = false
csharp_space_between_method_call_parameter_list_parentheses              = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis        = false
csharp_space_between_method_declaration_parameter_list_parentheses       = false
csharp_space_between_parentheses                                         = false
csharp_space_between_square_brackets                                     = false

; Wrapping preferences
csharp_preserve_single_line_blocks     = true
csharp_preserve_single_line_statements = true
